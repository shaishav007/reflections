What happens when you initialize a repository? Why do you need to do it?

When we initialize a repository, we achieve the ability to make commits hence enabling version control for the directory. Initializing enables us to track different versions of the same files with the help of commits. That is why we need to do it.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area can be visualised as a platform on which the files desired to be committed would be placed to ship finally to commit.

How can you use the staging area to make sure you have one commit per logical change?

Add only the files that have been modified to the staging area. The rest of the files need not be affected. While committing write the appropriate message and henc we would have a commit per the logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches help when we need to make experimental features but not necessarily make them a part of the program itself. In that case we can dedicate a different branch and make updates until we are satisfied. The original program would still be on the master branch. We can always merge the 2 branches when it becomes necessary.

How do the diagrams help you visualize the branch structure?

It helps us understand exactly when each branch came into existence. Hence we can know what exact features will be present or absent in one branch or the other.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging 2 branches essentially adds features of both the versions up. This results in addition of all the features of 1 branch to the other. Atleast thats the idea of a merge. Merge adds the lines of code that are missing in one branch of the file{essentially those corresponding to the feature} to the file in the other branch. This may lead to conflicts which must be resolved by us users by editing the files as we see fit. The diagrams show the process elaborately. It helps us in visualizing the changes.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic saves time. No need to specify the amazing aspects of such convenience. Always doing merges manually will give us an assurance that there was no unintentional error introduced while merging. Automatic merging does introduce suspicions if any bug or error gets introduced. 